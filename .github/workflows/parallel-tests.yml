name: Parallel Tests

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/ISSUE_TEMPLATE/**'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/ISSUE_TEMPLATE/**'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  pre-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev build-essential clang libclang-dev llvm-dev
          sudo apt-get install -y libgflags-dev libsnappy-dev zlib1g-dev libbz2-dev liblz4-dev libzstd-dev
          sudo apt-get install -y cmake ninja-build
      
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      
      - name: Set LIBCLANG_PATH
        run: |
          # 直接パスを指定する方法に変更
          echo "LIBCLANG_PATH=/usr/lib/llvm-14/lib" >> $GITHUB_ENV
          echo "Using libclang at: /usr/lib/llvm-14/lib"
      
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "rust-stable"
      
      - name: Check formatting
        run: cargo fmt --all -- --check
      
      - name: Lint with clippy
        run: |
          # 初回実行時はエラーを無視して依存関係をビルドする
          cargo clippy --no-default-features --features=snow || true
          # 2回目の実行でエラーをチェック（警告はエラーとして扱わない）
          cargo clippy --no-default-features --features=snow

  parallel-test:
    needs: pre-check
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        test-group: [crypto, smart_contract, transaction, network, storage, sharding, cross_chain]

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev build-essential clang libclang-dev llvm-dev
        sudo apt-get install -y libgflags-dev libsnappy-dev zlib1g-dev libbz2-dev liblz4-dev libzstd-dev

    - name: Set up Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: stable
        components: rustfmt, clippy

    - name: Set LIBCLANG_PATH
      run: |
        find /usr -name libclang.so* | head -n 1 | xargs dirname > /tmp/libclang_path
        echo "LIBCLANG_PATH=$(cat /tmp/libclang_path)" >> $GITHUB_ENV
        echo "Found libclang at: $LIBCLANG_PATH"

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        shared-key: "rust-stable"
        save-if: ${{ github.ref == 'refs/heads/main' }}

    # 事前にモジュール問題を修正
    - name: Make fix-modules.sh executable
      run: |
        if [ -f tools/fix-modules.sh ]; then
          chmod +x tools/fix-modules.sh
          ./tools/fix-modules.sh
        else
          echo "fix-modules.sh not found, skipping"
        fi

    - name: Build
      run: cargo build --no-default-features --features=snow

    - name: Run tests for ${{ matrix.test-group }}
      run: |
        # テスト対象のモジュールを検索
        MODULES=$(find src/${{ matrix.test-group }} -name "*.rs" | grep -v "mod.rs" | sed 's|^src/||' | sed 's|\.rs$||' | sed 's|/|::|g')
        
        # テストを実行
        if [ -n "$MODULES" ]; then
          echo "Testing modules: $MODULES"
          cargo test --no-default-features --features=snow $MODULES -- --nocapture
        else
          echo "No modules found for ${{ matrix.test-group }}"
        fi

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.test-group }}
        path: |
          target/debug/deps/test_*.xml
          target/debug/*.log
        retention-days: 5
        if-no-files-found: ignore

  coverage:
    needs: parallel-test
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'

    steps:
    - uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev build-essential clang libclang-dev llvm-dev
        sudo apt-get install -y libgflags-dev libsnappy-dev zlib1g-dev libbz2-dev liblz4-dev libzstd-dev

    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview

    - name: Set LIBCLANG_PATH
      run: |
        find /usr -name libclang.so* | head -n 1 | xargs dirname > /tmp/libclang_path
        echo "LIBCLANG_PATH=$(cat /tmp/libclang_path)" >> $GITHUB_ENV

    - name: Install cargo-llvm-cov
      uses: taiki-e/install-action@cargo-llvm-cov

    - name: Generate code coverage
      run: cargo llvm-cov --no-default-features --features="snow" --lcov --output-path lcov.info

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: lcov.info
        fail_ci_if_error: false