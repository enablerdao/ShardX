name: Docker Publish to GitHub Packages

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:

# 同時実行を制御
concurrency:
  group: docker-publish-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    permissions:
      contents: read
      packages: write
      id-token: write  # プロベナンスに必要

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=ref,event=branch
            type=sha,format=short
            type=raw,value=latest,enable={{is_default_branch}}

      # AMD64 向けのビルドとプッシュ
      - name: Build and push Docker image for amd64
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.simple
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}-amd64
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=amd64
          cache-to: type=gha,mode=max,scope=amd64
          provenance: false
          allow: security.insecure
        continue-on-error: true

      # ARM64 向けのビルドとプッシュ
      - name: Build and push Docker image for arm64
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.simple
          platforms: linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}-arm64
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=arm64
          cache-to: type=gha,mode=max,scope=arm64
          provenance: false
          allow: security.insecure
        continue-on-error: true
        
      # マニフェストリストの作成とプッシュ
      - name: Create and push manifest list
        run: |
          # Docker CLI にログイン
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
          
          # 各イメージタグに対してマニフェストを作成
          for tag in $(echo "${{ steps.meta.outputs.tags }}" | tr '\n' ' '); do
            echo "Creating manifest for $tag"
            
            # マニフェストリストを作成
            docker manifest create $tag \
              $tag-amd64 \
              $tag-arm64
            
            # マニフェストリストをプッシュ
            docker manifest push $tag
          done
        continue-on-error: true