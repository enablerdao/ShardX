services:
  # ShardXノード（軽量設定）
  - type: web
    name: shardx-node
    env: docker
    dockerfilePath: ./Dockerfile.render
    dockerContext: .
    plan: free # 無料プラン
    healthCheckPath: /info
    envVars:
      - key: PORT
        value: 54868
      - key: NODE_ID
        value: render_node
      - key: RUST_LOG
        value: info
      - key: INITIAL_SHARDS
        value: "10" # シャード数を減らして軽量化
      - key: DATA_DIR
        value: /tmp/shardx-data # 一時ディレクトリを使用
      - key: REDIS_ENABLED
        value: "true"
      - key: CORS_ENABLED
        value: "true"
      - key: REDIS_URL
        fromService:
          name: redis
          type: redis
          property: connectionString

  # Webインターフェース（Node.js）
  - type: web
    name: shardx-web
    env: node
    buildCommand: cd web && npm install && npm run build
    startCommand: cd web && npm start
    envVars:
      - key: PORT
        value: 52153
      - key: API_URL
        value: https://shardx-node.onrender.com
      - key: NODE_ENV
        value: production
      - key: CORS_ENABLED
        value: "true"

  # Redis（キャッシュとメッセージングに使用）
  - type: redis
    name: redis
    ipAllowList: # 全てのIPからのアクセスを許可
      - source: 0.0.0.0/0
        description: everywhere
    plan: free # 無料プラン

  # バックグラウンドワーカー（分析処理用）
  - type: worker
    name: shardx-worker
    env: docker
    dockerfilePath: ./Dockerfile.simple
    dockerContext: .
    plan: free # 無料プラン
    envVars:
      - key: NODE_ID
        value: render_worker
      - key: RUST_LOG
        value: info
      - key: WORKER_MODE
        value: "true"
      - key: REDIS_ENABLED
        value: "true"
      - key: REDIS_URL
        fromService:
          name: redis
          type: redis
          property: connectionString