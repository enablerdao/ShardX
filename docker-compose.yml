name: shardx

services:
  # メインノード
  main-node:
    image: yukih47/shardx:latest
    container_name: shardx-main-node
    ports:
      - "8080:8080"  # API
      - "9000:9000"  # P2P
      - "8545:8545"  # RPC
    environment:
      - NODE_TYPE=main
      - NODE_ID=main-node
      - P2P_PORT=9000
      - API_PORT=8080
      - RPC_PORT=8545
      - LOG_LEVEL=info
      - SHARD_COUNT=5
      - DATA_DIR=/app/data
      - MEMORY_LIMIT=2G
    volumes:
      - shardx-main-data:/app/data
    networks:
      - shardx-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/info"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G

  # シャードノード (5つのシャード)
  shard-node-1:
    image: yukih47/shardx:latest
    container_name: shardx-shard-node-1
    depends_on:
      main-node:
        condition: service_healthy
    ports:
      - "8081:8080"  # API
      - "9001:9000"  # P2P
      - "8546:8545"  # RPC
    environment:
      - NODE_TYPE=shard
      - NODE_ID=shard-node-1
      - SHARD_ID=shard1
      - P2P_PORT=9000
      - API_PORT=8080
      - RPC_PORT=8545
      - MAIN_NODE=main-node:9000
      - LOG_LEVEL=info
      - DATA_DIR=/app/data
      - MEMORY_LIMIT=1G
    volumes:
      - shardx-shard1-data:/app/data
    networks:
      - shardx-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  shard-node-2:
    image: yukih47/shardx:latest
    container_name: shardx-shard-node-2
    depends_on:
      main-node:
        condition: service_healthy
    ports:
      - "8082:8080"  # API
      - "9002:9000"  # P2P
      - "8547:8545"  # RPC
    environment:
      - NODE_TYPE=shard
      - NODE_ID=shard-node-2
      - SHARD_ID=shard2
      - P2P_PORT=9000
      - API_PORT=8080
      - RPC_PORT=8545
      - MAIN_NODE=main-node:9000
      - LOG_LEVEL=info
      - DATA_DIR=/app/data
      - MEMORY_LIMIT=1G
    volumes:
      - shardx-shard2-data:/app/data
    networks:
      - shardx-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  shard-node-3:
    image: yukih47/shardx:latest
    container_name: shardx-shard-node-3
    depends_on:
      main-node:
        condition: service_healthy
    ports:
      - "8083:8080"  # API
      - "9003:9000"  # P2P
      - "8548:8545"  # RPC
    environment:
      - NODE_TYPE=shard
      - NODE_ID=shard-node-3
      - SHARD_ID=shard3
      - P2P_PORT=9000
      - API_PORT=8080
      - RPC_PORT=8545
      - MAIN_NODE=main-node:9000
      - LOG_LEVEL=info
      - DATA_DIR=/app/data
      - MEMORY_LIMIT=1G
    volumes:
      - shardx-shard3-data:/app/data
    networks:
      - shardx-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  shard-node-4:
    image: yukih47/shardx:latest
    container_name: shardx-shard-node-4
    depends_on:
      main-node:
        condition: service_healthy
    ports:
      - "8084:8080"  # API
      - "9004:9000"  # P2P
      - "8549:8545"  # RPC
    environment:
      - NODE_TYPE=shard
      - NODE_ID=shard-node-4
      - SHARD_ID=shard4
      - P2P_PORT=9000
      - API_PORT=8080
      - RPC_PORT=8545
      - MAIN_NODE=main-node:9000
      - LOG_LEVEL=info
      - DATA_DIR=/app/data
      - MEMORY_LIMIT=1G
    volumes:
      - shardx-shard4-data:/app/data
    networks:
      - shardx-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  shard-node-5:
    image: yukih47/shardx:latest
    container_name: shardx-shard-node-5
    depends_on:
      main-node:
        condition: service_healthy
    ports:
      - "8085:8080"  # API
      - "9005:9000"  # P2P
      - "8550:8545"  # RPC
    environment:
      - NODE_TYPE=shard
      - NODE_ID=shard-node-5
      - SHARD_ID=shard5
      - P2P_PORT=9000
      - API_PORT=8080
      - RPC_PORT=8545
      - MAIN_NODE=main-node:9000
      - LOG_LEVEL=info
      - DATA_DIR=/app/data
      - MEMORY_LIMIT=1G
    volumes:
      - shardx-shard5-data:/app/data
    networks:
      - shardx-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  # Webインターフェース
  web:
    image: nginx:alpine
    container_name: shardx-web
    ports:
      - "80:80"
    expose:
      - "80"
    volumes:
      - ./web/dist:/usr/share/nginx/html
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      main-node:
        condition: service_healthy
    environment:
      - API_URL=http://main-node:8080
    networks:
      - shardx-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M

  # モニタリングサービス
  prometheus:
    image: prom/prometheus:latest
    container_name: shardx-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - shardx-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  grafana:
    image: grafana/grafana:latest
    container_name: shardx-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=shardx
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - grafana-data:/var/lib/grafana
    networks:
      - shardx-network
    depends_on:
      - prometheus
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Redis（クロスシャード通信用）
  redis:
    image: redis:alpine
    container_name: shardx-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    restart: unless-stopped
    command: redis-server /usr/local/etc/redis/redis.conf --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    networks:
      - shardx-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

volumes:
  shardx-main-data:
  shardx-shard1-data:
  shardx-shard2-data:
  shardx-shard3-data:
  shardx-shard4-data:
  shardx-shard5-data:
  prometheus-data:
  grafana-data:
  redis-data:

networks:
  shardx-network:
    driver: bridge