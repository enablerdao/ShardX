FROM rust:1.76-slim-bookworm as builder

WORKDIR /app

# 必要なパッケージをインストール
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    build-essential \
    pkg-config \
    libssl-dev \
    git \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# ソースコードをコピー
COPY . .

# Rustプロジェクトをビルド
RUN cargo build --release

# Node.jsをインストールしてWebインターフェースをビルド
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    nodejs \
    npm \
    && rm -rf /var/lib/apt/lists/*

# Webインターフェースをビルド
WORKDIR /app/web
RUN npm install && npm run build

# 実行用のイメージを作成
FROM debian:bookworm-slim

WORKDIR /app

# 必要なパッケージをインストール
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    ca-certificates \
    nginx \
    && rm -rf /var/lib/apt/lists/*

# バイナリをコピー
COPY --from=builder /app/target/release/shardx /app/bin/shardx
RUN chmod +x /app/bin/shardx

# Webインターフェースをコピー
COPY --from=builder /app/web/dist /app/web

# Nginx設定
COPY web/nginx.conf /etc/nginx/conf.d/default.conf

# データディレクトリを作成
RUN mkdir -p /app/data /tmp/shardx-data && chmod 777 /app/data /tmp/shardx-data

# APIポートを公開
EXPOSE 54867 54868

# 環境変数の設定
ENV RUST_LOG=info
ENV DATA_DIR=/app/data
ENV PORT=54868
ENV NODE_ID=render_node
ENV INITIAL_SHARDS=10
ENV CORS_ENABLED=true

# 起動スクリプト
COPY scripts/docker-entrypoint.sh /app/
RUN chmod +x /app/docker-entrypoint.sh

# アプリケーションを実行
ENTRYPOINT ["/app/docker-entrypoint.sh"]